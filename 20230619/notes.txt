http2.0  http1.0
HTTP/2.0和HTTP/1.0是两个不同版本的HTTP协议，它们之间有以下几个主要区别：

多路复用：HTTP/2.0支持多路复用，可以在一个TCP连接上同时传输多个请求和响应，从而提高了网络性能和效率。而HTTP/1.0每次只能传输一个请求和响应，需要建立多个TCP连接。

二进制分帧：HTTP/2.0使用二进制分帧来传输数据，将数据分割成更小的帧进行传输，从而提高了传输效率和可靠性。而HTTP/1.0使用文本格式传输数据，数据量较大，传输效率较低。

头部压缩：HTTP/2.0使用头部压缩技术来减少头部信息的传输量，从而提高了传输效率。而HTTP/1.0每次传输请求和响应时都需要传输完整的头部信息。

服务器推送：HTTP/2.0支持服务器推送，可以在客户端请求之前将相关资源主动推送给客户端，从而提高了页面加载速度和性能。而HTTP/1.0不支持服务器推送。

总之，HTTP/2.0相比HTTP/1.0在性能和效率方面有了很大的提升，可以更好地满足现代Web应用的需求。
---------------------------------------------------------------------------------------------
https 建立连接需要几次握手?

HTTPS建立连接需要进行两次TCP三次握手，也就是总共需要进行6次握手。

第一次握手：客户端向服务器发送一个HTTPS连接请求，请求建立一个安全的连接。这个请求是通过TCP协议进行传输的，因此需要进行一次TCP三次握手。

第二次握手：服务器接收到客户端的HTTPS连接请求后，会向客户端发送一个证书，证明服务器的身份和公钥。这个证书也是通过TCP协议进行传输的，因此需要进行一次TCP三次握手。

第三次握手：客户端接收到服务器的证书后，会验证证书的有效性，并生成一个随机数，用于后续的加密通信。客户端会将这个随机数通过服务器的公钥进行加密，并发送给服务器。这个加密过程也是通过TCP协议进行传输的，因此需要进行一次TCP三次握手。

第四次握手：服务器接收到客户端发送的加密随机数后，会使用自己的私钥进行解密，并生成一个新的随机数，用于后续的加密通信。服务器会将这个随机数通过客户端的公钥进行加密，并发送给客户端。这个加密过程也是通过TCP协议进行传输的，因此需要进行一次TCP三次握手。

第五次握手：客户端接收到服务器发送的加密随机数后，会使用自己的私钥进行解密，并生成一个新的随机数，用于后续的加密通信。客户端会向服务器发送一个确认消息，表示已经准备好进行加密通信。这个确认消息也是通过TCP协议进行传输的，因此需要进行一次TCP三次握手。

第六次握手：服务器接收到客户端发送的确认消息后，会向客户端发送一个确认消息，表示已经准备好进行加密通信。这个确认消息也是通过TCP协议进行传输的，因此需要进行一次TCP三次握手。

总之，HTTPS建立连接需要进行两次TCP三次握手，也就是总共需要进行6次握手。这个过程比HTTP建立连接的过程要复杂，但可以保证通信的安全性和可靠性。
--------------------------------------------------------------------
HTTPS使用了对称加密和非对称加密两种加密方式来保证通信的安全性。

对称加密是指使用同一个密钥进行加密和解密的加密方式。在HTTPS中，客户端和服务器会协商一个对称密钥，用于后续的加密通信。对称加密的优点是加密和解密速度快，但缺点是密钥需要在客户端和服务器之间共享，容易被攻击者截获和破解。

非对称加密是指使用不同的密钥进行加密和解密的加密方式。在HTTPS中，客户端和服务器会使用非对称加密算法（如RSA）来协商一个对称密钥。客户端会生成一个随机数，并使用服务器的公钥进行加密，然后将加密后的随机数发送给服务器。服务器接收到加密后的随机数后，使用自己的私钥进行解密，得到随机数，并使用随机数生成一个对称密钥，用于后续的加密通信。非对称加密的优点是密钥不需要在客户端和服务器之间共享，安全性更高，但缺点是加密和解密速度慢。
----------------------------------------------------------------------
https 优化
使用HTTP/2协议：HTTP/2协议支持多路复用和头部压缩等特性，可以减少网络连接的开销和传输的数据量，提高HTTPS的性能。

使用缓存：可以在客户端和服务器上设置缓存，避免重复请求相同的资源，减少网络传输的数据量和延迟，提高HTTPS的性能。ssl会话缓存

使用CDN加速：可以使用CDN（内容分发网络）来加速HTTPS的传输，将静态资源缓存在CDN节点上，减少网络传输的距离和延迟，提高HTTPS的性能。

优化加密算法：可以选择更快速和更安全的加密算法，如AES-GCM和ChaCha20-Poly1305等，提高HTTPS的性能。
---------------------------------------------------------------------
TCP连接  服务器为什么要先listen一下

在TCP连接中，服务器需要先调用listen函数来监听指定的端口，以便能够接收客户端的连接请求。listen函数会将服务器的套接字设置为被动模式，等待客户端的连接请求。

具体来说，服务器在调用listen函数后，会将套接字的状态设置为LISTEN，并将其加入到内核维护的一个队列中，等待客户端的连接请求。当客户端发送连接请求时，服务器会从队列中取出一个套接字，创建一个新的套接字来处理该连接，并将新的套接字返回给应用程序。

因此，如果服务器没有先调用listen函数，就无法接收客户端的连接请求，也就无法建立TCP连接。因此，服务器必须先调用listen函数来准备好接收客户端的连接请求。

---------------------------------------------------------------------------






